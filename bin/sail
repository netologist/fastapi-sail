#!/usr/bin/env bash

UNAMEOUT="$(uname -s)"
SAIL_ROOT_DIR="$(dirname -- "$(readlink -f ${BASH_SOURCE[0]})")/.."

# Verify operating system is supported...
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]. Fastmail Sail supports macOS, Linux, and Windows (WSL2)." >&2

    exit 1
fi

# Determine if stdout is a terminal...
if test -t 1; then
    # Determine if colors are supported...
    ncolors=$(tput colors)

    if test -n "$ncolors" && test "$ncolors" -ge 8; then
        BOLD="$(tput bold)"
        YELLOW="$(tput setaf 3)"
        GREEN="$(tput setaf 2)"
        NC="$(tput sgr0)"
    fi
fi

# Function that prints the available commands...
function display_help {
    echo "FastAPI Sail"
    echo
    echo "${YELLOW}Usage:${NC}" >&2
    echo "  sail COMMAND [options] [arguments]"
    echo
    echo "Unknown commands are passed to the docker-compose binary."
    echo
    echo "${YELLOW}Service Commands:${NC}"
    echo "  ${GREEN}sail new ...${NC}     Creates new fastapi project with sail setup."
    # echo "  ${GREEN}sail init${NC}        Set initialize  docker-compose and devcontainer.json files."
    # echo "  ${GREEN}  --service ${NC}     Add to services like pgsql, mysql, redis, etc... Default (pgsql)"
    # echo "  ${GREEN}  --runtime ${NC}     Set Python version... Default Python 3.12"
    # echo "  ${GREEN}  --python ${NC}      Alias for --runtime option"
    # echo "  ${GREEN}sail add ...${NC}     Add required services in docker-compose"
    # echo "  ${GREEN}  --service ${NC}     Add to services like pgsql, mysql, redis, etc... Default (pgsql)"
    echo "  ${GREEN}sail services${NC}    List all available service containers"
    # echo "  ${GREEN}sail runtimes${NC}    List all available runtimes"
    echo
    echo "${YELLOW}docker-compose Commands:${NC}"
    echo "  ${GREEN}sail up${NC}          Start the application"
    echo "  ${GREEN}sail up -d${NC}       Start the application in the background"
    echo "  ${GREEN}sail stop${NC}        Stop the application"
    echo "  ${GREEN}sail restart${NC}     Restart the application"
    echo "  ${GREEN}sail ps${NC}          Display the status of all containers"
    echo
    echo "${YELLOW}Python Commands:${NC}"
    echo "  ${GREEN}sail python ...${NC}  Run a snippet of Python code"
    echo "  ${GREEN}sail python -v${NC}"
    echo
    echo "${YELLOW}Pip Commands:${NC}"
    echo "  ${GREEN}sail pip ...${NC}       Run a Pip command"
    echo
    echo "${YELLOW}Node Commands:${NC}"
    echo "  ${GREEN}sail node ...${NC}      Run a Node command"
    echo
    echo "${YELLOW}NPM Commands:${NC}"
    echo "  ${GREEN}sail npm ...${NC}        Run a npm command"
    echo "  ${GREEN}sail npx${NC}            Run a npx command"
    echo "  ${GREEN}sail npm run prod${NC}"
    echo
    echo "${YELLOW}PNPM Commands:${NC}"
    echo "  ${GREEN}sail pnpm ...${NC}        Run a pnpm command"
    echo "  ${GREEN}sail pnpx${NC}            Run a pnpx command"
    echo "  ${GREEN}sail pnpm run prod${NC}"
    echo
    echo "${YELLOW}Yarn Commands:${NC}"
    echo "  ${GREEN}sail yarn ...${NC}        Run a Yarn command"
    echo "  ${GREEN}sail yarn run prod${NC}"
    echo
    echo "${YELLOW}Database Commands:${NC}"
    echo "  ${GREEN}sail mysql${NC}         Start a MySQL CLI session within the 'mysql' container"
    echo "  ${GREEN}sail mariadb${NC}       Start a MySQL CLI session within the 'mariadb' container"
    echo "  ${GREEN}sail psql${NC}          Start a PostgreSQL CLI session within the 'pgsql' container"
    echo "  ${GREEN}sail mongodb${NC}       Start a Mongo Shell session within the 'mongodb' container"
    echo "  ${GREEN}sail redis${NC}         Start a Redis CLI session within the 'redis' container"
    echo
    echo "${YELLOW}Running Tests:${NC}"
    echo "  ${GREEN}sail pytest${NC}        Run pytest"
    echo "  ${GREEN}sail tox ...${NC}       Run toxblack"
    echo "  ${GREEN}sail black ...${NC}     Run black"
    echo "  ${GREEN}sail flake8 ...${NC}    Run flake8"
    echo "  ${GREEN}sail isort${NC}         Run isort"
    echo "  ${GREEN}sail mypy${NC}          Run mypy"
    echo "  ${GREEN}sail pylint${NC}        Run pylint"
    echo "  ${GREEN}sail pre-commit${NC}    Run pre-commit"
    echo
    echo "${YELLOW}Container CLI:${NC}"
    echo "  ${GREEN}sail shell${NC}         Start a shell session within the application container"
    echo "  ${GREEN}sail zsh${NC}           Alias for 'sail shell'"
    echo "  ${GREEN}sail root-shell${NC}    Start a root shell session within the application container"
    echo "  ${GREEN}sail root-zsh${NC}      Alias for 'sail root-shell'"
    echo
    echo "${YELLOW}Sharing:${NC}"
    echo "  ${GREEN}sail open${NC}    Open the site in your browser"
    echo
    echo "${YELLOW}Binaries:${NC}"
    echo "  ${GREEN}sail run ...${NC}   Run a command within the application container"
    exit 1
}

# Proxy the "help" command...
if [ $# -gt 0 ]; then
    if [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ]; then
        display_help
    fi
else
    display_help
fi

# Source the ".env" file so fastapi's environment variables are available...
# shellcheck source=/dev/null
if [ -n "$APP_ENV" ] && [ -f ./.env."$APP_ENV" ]; then
  source ./.env."$APP_ENV";
elif [ -f ./.env ]; then
  source ./.env;
fi

# Define environment variables...
export APP_PORT=${APP_PORT:-8000}
export APP_SERVICE=${APP_SERVICE:-"fastapi.test"}
export DB_PORT=${DB_PORT:-5432}
export WWWUSER=${WWWUSER:-$(id -u)}
export WWWGROUP=${WWWGROUP:-$(id -g)}

export SAIL_FILES=${SAIL_FILES:-""}
export SAIL_SHARE_DASHBOARD=${SAIL_SHARE_DASHBOARD:-4040}
export SAIL_SHARE_SERVER_HOST=${SAIL_SHARE_SERVER_HOST:-"fastapi-sail.site"}
export SAIL_SHARE_SERVER_PORT=${SAIL_SHARE_SERVER_PORT:-8080}
export SAIL_SHARE_SUBDOMAIN=${SAIL_SHARE_SUBDOMAIN:-""}
export SAIL_SHARE_DOMAIN=${SAIL_SHARE_DOMAIN:-"$SAIL_SHARE_SERVER_HOST"}
export SAIL_SHARE_SERVER=${SAIL_SHARE_SERVER:-""}

# Function that outputs Sail is not running...
function sail_is_not_running {
    echo "${BOLD}Sail is not running.${NC}" >&2
    echo "" >&2
    echo "${BOLD}You may Sail using the following commands:${NC} '$SAIL_HOME/bin/sail up' or '$SAIL_HOME/bin/sail up -d'" >&2

    exit 1
}


function get_available_services {
    local services;
    for fullfile in "$SAIL_ROOT_DIR/stubs"/*
    do
        basename=$(basename -- "$fullfile")
        extension="${basename##*.}"
        filename="${basename%.*}"
        if [ "$filename" != "devcontainer" ] && [ "$filename" != "docker-compose" ]; then
            services+=("$filename")
        fi
    done
    declare -p services;
}

function list_available_services {
    local services;
    eval $(get_available_services)

    echo -e "${BOLD}\nAvailable Services:${NC}"
    for service in ${services[@]}
    do
        echo " - $service"
    done
    exit 1
}

function create_project() {
    desired_runtime=(3.12)
    desired_services=(pgsql)
    project_folder="$1"
    echo "new fastapi project"
    echo "$1"
    # shift 1
    while [[ $# -gt 0 ]]; do
        case $1 in
        --with)
            IFS=',' read -r -a desired_services <<< "$2"
            shift 1
            ;;
        esac
    shift
    done

    local services;
    local has_db=false;
    local db_type;
    local db_host;
    local db_port;
    eval $(get_available_services)
    eligable_services=()
    for i in "${services[@]}"; do
        skip=
        for j in "${desired_services[@]}"; do
            [[ $i == $j ]] && { eligable_services+=("$i"); break; }
        done
    done

    local stubs="";
    for service_name in ${eligable_services[@]}
    do
        echo " - $service_name"
        stubs+=" /opt/stubs/${service_name}.stub"
    done

    mkdir -p $project_folder
    cp  -R $SAIL_ROOT_DIR/project-template/* $project_folder
    cp  -R $SAIL_ROOT_DIR/project-template/.env $project_folder
    docker run -v $SAIL_ROOT_DIR:/opt hasanozgan/yq eval-all '. as $item ireduce ({}; . *+ $item)' /opt/stubs/docker-compose.stub $stubs \
        | sed "s/{{PYTHON_VERSION}}/$desired_runtime/" \
        > $project_folder/docker-compose.yml
    exit 1;
}

# Define Docker Compose command prefix...
if docker compose &> /dev/null; then
    DOCKER_COMPOSE=(docker compose)
else
    DOCKER_COMPOSE=(docker-compose)
fi

if [ -n "$SAIL_FILES" ]; then
    # Convert SAIL_FILES to an array...
    IFS=':' read -ra SAIL_FILES <<< "$SAIL_FILES"

    for FILE in "${SAIL_FILES[@]}"; do
        if [ -f "$FILE" ]; then
            DOCKER_COMPOSE+=(-f "$FILE")
        else
            echo "${BOLD}Unable to find Docker Compose file: '${FILE}'${NC}" >&2

            exit 1
        fi
    done
fi

EXEC="yes"

if [ -z "$SAIL_SKIP_CHECKS" ]; then
    # Ensure that Docker is running...
    if ! docker info > /dev/null 2>&1; then
        echo "${BOLD}Docker is not running.${NC}" >&2

        exit 1
    fi

    # Determine if Sail is currently up...
    if "${DOCKER_COMPOSE[@]}" ps "$APP_SERVICE" 2>&1 | grep 'Exit\|exited'; then
        echo "${BOLD}Shutting down old Sail processes...${NC}" >&2

        "${DOCKER_COMPOSE[@]}" down > /dev/null 2>&1

        EXEC="no"
    elif [ -z "$("${DOCKER_COMPOSE[@]}" ps -q)" ]; then
        EXEC="no"
    fi
fi

ARGS=()

# Proxy PHP commands to the "php" binary on the application container...
if [ "$1" == "python" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" "python")
    else
        sail_is_not_running
    fi

# Proxy commands on the application container...
elif [ "$1" == "run" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        CMD=$1
        shift 1
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" "$CMD")
    else
        sail_is_not_running
    fi

# Proxy docker-compose commands to the docker-compose binary on the application container...
elif [ "$1" == "docker-compose" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" "${DOCKER_COMPOSE[@]}")
    else
        sail_is_not_running
    fi

# Proxy pip commands to the "pip" binary on the application container...
elif [ "$1" == "pip" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" "pip")
    else
        sail_is_not_running
    fi

# Proxy the "test" command to the "pytest" command...
elif [ "$1" == "test" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" pytest)
    else
        sail_is_not_running
    fi

elif [ "$1" == "tox" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" tox)
    else
        sail_is_not_running
    fi

elif [ "$1" == "black" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" black)
    else
        sail_is_not_running
    fi

# Proxy Node commands to the "node" binary on the application container...
elif [ "$1" == "node" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" node)
    else
        sail_is_not_running
    fi

# Proxy NPM commands to the "npm" binary on the application container...
elif [ "$1" == "npm" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" npm)
    else
        sail_is_not_running
    fi

# Proxy NPX commands to the "npx" binary on the application container...
elif [ "$1" == "npx" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" npx)
    else
        sail_is_not_running
    fi

# Proxy PNPM commands to the "pnpm" binary on the application container...
elif [ "$1" == "pnpm" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" pnpm)
    else
        sail_is_not_running
    fi

# Proxy PNPX commands to the "pnpx" binary on the application container...
elif [ "$1" == "pnpx" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" pnpx)
    else
        sail_is_not_running
    fi

# Proxy Yarn commands to the "yarn" binary on the application container...
elif [ "$1" == "yarn" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" yarn)
    else
        sail_is_not_running
    fi

# Initiate a MySQL CLI terminal session within the "mysql" container...
elif [ "$1" == "mysql" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(mysql bash -c)
        ARGS+=("MYSQL_PWD=\${MYSQL_PASSWORD} mysql -u \${MYSQL_USER} \${MYSQL_DATABASE}")
    else
        sail_is_not_running
    fi

# Initiate a MySQL CLI terminal session within the "mariadb" container...
elif [ "$1" == "mariadb" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(mariadb bash -c)
        ARGS+=("MYSQL_PWD=\${MYSQL_PASSWORD} mariadb -u \${MYSQL_USER} \${MYSQL_DATABASE}")
    else
        sail_is_not_running
    fi

# Initiate a PostgreSQL CLI terminal session within the "pgsql" container...
elif [ "$1" == "psql" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(pgsql bash -c)
        ARGS+=("PGPASSWORD=\${PGPASSWORD} psql -U \${POSTGRES_USER} \${POSTGRES_DB}")
    else
        sail_is_not_running
    fi

# Initiate a Bash shell within the application container...
elif [ "$1" == "shell" ] || [ "$1" == "zsh" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" zsh)
    else
        sail_is_not_running
    fi

# Initiate a root user Bash shell within the application container...
elif [ "$1" == "root-shell" ] || [ "$1" == "root-zsh" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u root)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" zsh)
    else
        sail_is_not_running
    fi

# Initiate a MongoDB Shell within the "mongodb" container...
elif [ "$1" == "mongodb" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(mongodb mongosh --port "${FORWARD_MONGODB_PORT:-27017}" --username "$MONGODB_USERNAME" --password "$MONGODB_PASSWORD" --authenticationDatabase admin)
    else
        sail_is_not_running
    fi

# Initiate a Redis CLI terminal session within the "redis" container...
elif [ "$1" == "redis" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(redis redis-cli)
    else
        sail_is_not_running
    fi

# Open the site...
elif [ "$1" == "open" ]; then
    shift 1

    if command -v open &>/dev/null; then
        OPEN="open"
    elif command -v xdg-open &>/dev/null; then
        OPEN="xdg-open"
    else
        echo "Neither open nor xdg-open is available. Exiting."
        exit 1
    fi

    if [ "$EXEC" == "yes" ]; then

        if [[ -n "$APP_PORT" && "$APP_PORT" != "8000" ]]; then
            FULL_URL="${APP_URL}:${APP_PORT}"
        else
            FULL_URL="$APP_URL"
        fi

        $OPEN "$FULL_URL"

        exit
    else
        sail_is_not_running
    fi

    elif [ "$1" == "new" ]; then
        shift 1
        create_project "$@"

    # # Proxy add binary on the application container...
    # elif [ "$1" == "add" ]; then
    #     shift 1
    #     add_service_in_docker_compose_file "$@"

    # Proxy list binary on the application container...
    elif [ "$1" == "services" ]; then
        list_available_services

    # elif [ "$1" == "runtimes" ]; then
    #     list_available_runtimes
    fi

# Run Docker Compose with the defined arguments...
"${DOCKER_COMPOSE[@]}" "${ARGS[@]}" "$@"
